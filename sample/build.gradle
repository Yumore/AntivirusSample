apply plugin: 'com.android.application'
apply from: "${rootDir}/common.gradle"
apply plugin: 'com.jakewharton.butterknife'

Properties properties = new Properties()
File configFile = project.rootProject.file("config.properties")
if (configFile.exists() && configFile.canRead()) {
    properties.load(configFile.newDataInputStream())
} else {
    throw new GradleException("Could not find config.properties or cannot readable!")
}

def increaseVersionCode() {
    def configFile = project.rootProject.file("config.properties")
    if (configFile.exists() && configFile.canRead()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(configFile))
        def versionCode = properties.getProperty("config.versionCode") as Integer
        def runTasks = gradle.startParameter.taskNames
        def realTask = ":sample:assembleRelease"
        if (realTask in runTasks) {
            versionCode += 1
            project.logger.error("realTask: ${realTask}, versionCode: ${versionCode}")
            properties['config.versionCode'] = versionCode.toString()
            properties.store(configFile.newWriter(), null)
        }
        return versionCode
    } else {
        throw new GradleException("Could not find config.properties or cannot readable!")
    }
}


android {
    defaultConfig {
        applicationId "${properties.getProperty("config.applicationId")}"
        versionCode increaseVersionCode() as Integer
        versionName "${properties.getProperty("config.versionName")}"
        multiDexEnabled true

        ndk{
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode true
        preDexLibraries true
        maxProcessCount 4
        threadCount 8
    }

    packagingOptions {
        pickFirst 'META-INF/'
        /*
         exclude 'project.properties'
         exclude 'META-INF/LICENSE.txt'
         exclude 'META-INF/LICENSE'
         exclude 'META-INF/NOTICE.txt'
         exclude 'META-INF/NOTICE'
         exclude 'META-INF/DEPENDENCIES.txt'
         exclude 'META-INF/DEPENDENCIES'
         */
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def buildTime = new Date().format("yyyyMMddHHmm")
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            if (abi == null) abi = "all"
            if (variant.name.toLowerCase().contains("release")) {
                outputFileName = "${project.rootDir.name}-${buildTime}-${abi}-${defaultConfig.versionName}-${variant.buildType.name}.apk"
                project.logger.error("outputFileName: ${outputFileName}")
            }
        }
    }
}

dependencies {
    implementation project(':baseui')
    implementation project(':starter')
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation "com.github.promeg:tinypinyin:2.0.3"
    implementation "com.github.promeg:tinypinyin-lexicons-android-cncity:2.0.3"

    implementation 'com.jakewharton:butterknife:10.2.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'
}
