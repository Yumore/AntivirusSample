package com.nathaniel.utility.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.nathaniel.utility.entity.PermissionEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "PERMISSION_ENTITY".
 */
public class PermissionEntityDao extends AbstractDao<PermissionEntity, Long> {

    public static final String TABLENAME = "PERMISSION_ENTITY";

    public PermissionEntityDao(DaoConfig config) {
        super(config);
    }


    public PermissionEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERMISSION_ENTITY\" (" + //
            "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
            "\"PERMISSION_EN\" TEXT," + // 1: permission_en
            "\"PERMISSION_CN\" TEXT," + // 2: permission_cn
            "\"PERMISSION_DESC\" TEXT," + // 3: permission_desc
            "\"PERMISSION_LEVEL\" INTEGER NOT NULL ," + // 4: permission_level
            "\"PERMISSION_HARM\" TEXT);"); // 5: permission_harm
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERMISSION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PermissionEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        String permission_en = entity.getPermission_en();
        if (permission_en != null) {
            stmt.bindString(2, permission_en);
        }

        String permission_cn = entity.getPermission_cn();
        if (permission_cn != null) {
            stmt.bindString(3, permission_cn);
        }

        String permission_desc = entity.getPermission_desc();
        if (permission_desc != null) {
            stmt.bindString(4, permission_desc);
        }
        stmt.bindLong(5, entity.getPermission_level());

        String permission_harm = entity.getPermission_harm();
        if (permission_harm != null) {
            stmt.bindString(6, permission_harm);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PermissionEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        String permission_en = entity.getPermission_en();
        if (permission_en != null) {
            stmt.bindString(2, permission_en);
        }

        String permission_cn = entity.getPermission_cn();
        if (permission_cn != null) {
            stmt.bindString(3, permission_cn);
        }

        String permission_desc = entity.getPermission_desc();
        if (permission_desc != null) {
            stmt.bindString(4, permission_desc);
        }
        stmt.bindLong(5, entity.getPermission_level());

        String permission_harm = entity.getPermission_harm();
        if (permission_harm != null) {
            stmt.bindString(6, permission_harm);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    @Override
    public void readEntity(Cursor cursor, PermissionEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPermission_en(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPermission_cn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPermission_desc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPermission_level(cursor.getInt(offset + 4));
        entity.setPermission_harm(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }

    @Override
    public PermissionEntity readEntity(Cursor cursor, int offset) {
        PermissionEntity entity = new PermissionEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // permission_en
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // permission_cn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // permission_desc
            cursor.getInt(offset + 4), // permission_level
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // permission_harm
        );
        return entity;
    }

    @Override
    protected final Long updateKeyAfterInsert(PermissionEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(PermissionEntity entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * Properties of entity PermissionEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Permission_en = new Property(1, String.class, "permission_en", false, "PERMISSION_EN");
        public final static Property Permission_cn = new Property(2, String.class, "permission_cn", false, "PERMISSION_CN");
        public final static Property Permission_desc = new Property(3, String.class, "permission_desc", false, "PERMISSION_DESC");
        public final static Property Permission_level = new Property(4, int.class, "permission_level", false, "PERMISSION_LEVEL");
        public final static Property Permission_harm = new Property(5, String.class, "permission_harm", false, "PERMISSION_HARM");
    }

    @Override
    public boolean hasKey(PermissionEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
