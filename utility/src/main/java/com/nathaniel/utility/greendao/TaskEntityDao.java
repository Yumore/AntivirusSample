package com.nathaniel.utility.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.nathaniel.utility.entity.TaskEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "TASK_ENTITY".
 */
public class TaskEntityDao extends AbstractDao<TaskEntity, Long> {

    public static final String TABLENAME = "TASK_ENTITY";

    public TaskEntityDao(DaoConfig config) {
        super(config);
    }


    public TaskEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_ENTITY\" (" + //
            "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
            "\"URL\" TEXT," + // 1: url
            "\"START\" INTEGER NOT NULL ," + // 2: start
            "\"END\" INTEGER NOT NULL ," + // 3: end
            "\"PROGRESS\" INTEGER NOT NULL );"); // 4: progress
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
        stmt.bindLong(3, entity.getStart());
        stmt.bindLong(4, entity.getEnd());
        stmt.bindLong(5, entity.getProgress());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
        stmt.bindLong(3, entity.getStart());
        stmt.bindLong(4, entity.getEnd());
        stmt.bindLong(5, entity.getProgress());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    @Override
    public void readEntity(Cursor cursor, TaskEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStart(cursor.getLong(offset + 2));
        entity.setEnd(cursor.getLong(offset + 3));
        entity.setProgress(cursor.getLong(offset + 4));
     }

    @Override
    public TaskEntity readEntity(Cursor cursor, int offset) {
        TaskEntity entity = new TaskEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.getLong(offset + 2), // start
            cursor.getLong(offset + 3), // end
            cursor.getLong(offset + 4) // progress
        );
        return entity;
    }

    @Override
    protected final Long updateKeyAfterInsert(TaskEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(TaskEntity entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * Properties of entity TaskEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Start = new Property(2, long.class, "start", false, "START");
        public final static Property End = new Property(3, long.class, "end", false, "END");
        public final static Property Progress = new Property(4, long.class, "progress", false, "PROGRESS");
    }

    @Override
    public boolean hasKey(TaskEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
