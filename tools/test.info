import java.util.ArrayList;
import java.util.List;

import com.itheima.mobilesafe58.domain.AppInfo;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.drawable.Drawable;

/**
 * 已安装应用的的信息提供者
 *
 * @author Kevin
 *
 */
public class AppInfoProvider {

	/**
	 * 获取已安装的应用
	 */
	public static ArrayList<AppInfo> getAppInfos(Context ctx) {
		PackageManager pm = ctx.getPackageManager();// 获取包管理器
		List<PackageInfo> installedPackages = pm.getInstalledPackages(0);// 获取所有已安装的包,
																			// 应用

		ArrayList<AppInfo> list = new ArrayList<AppInfo>();
		for (PackageInfo packageInfo : installedPackages) {
			AppInfo info = new AppInfo();

			String packageName = packageInfo.packageName;// 包名
			ApplicationInfo applicationInfo = packageInfo.applicationInfo;// 应用的信息

			String label = applicationInfo.loadLabel(pm).toString();// 应用名称
			Drawable icon = applicationInfo.loadIcon(pm);// 应用图标

			int uid = applicationInfo.uid;//应用的用户id

			info.packageName = packageName;
			info.label = label + uid;
			info.icon = icon;

			int flags = applicationInfo.flags;// 获取应用标记

			//状态机
			if ((flags & ApplicationInfo.FLAG_SYSTEM) == ApplicationInfo.FLAG_SYSTEM) {// 具备系统应用的特点
				info.isUser = false;// 是系统应用
			} else {
				info.isUser = true;// 是用户应用
			}

			if ((flags & ApplicationInfo.FLAG_EXTERNAL_STORAGE) == ApplicationInfo.FLAG_EXTERNAL_STORAGE) {// 具备外置存储卡应用的特点
				info.isSdcard = true;// 外置存储卡
			} else {
				info.isSdcard = false;// 手机内存
			}

			list.add(info);
		}

		return list;
	}
}

        /**
	 * 返回所有的有互联网访问权限的应用程序的流量信息。
	 * TrafficInfo 为一个Bean 模型类。使用的时候可以自定义一个、。
	 * @return
	 */
	public List<TrafficInfo> getTrafficInfo(Context context) {
		//获取到配置权限信息的应用程序
		PackageManager pms = context.getPackageManager();;
		List<PackageInfo> packinfos = pms
				.getInstalledPackages(PackageManager.GET_PERMISSIONS);
		//存放具有Internet权限信息的应用
		List<TrafficInfo> trafficInfos = new ArrayList<TrafficInfo>();
		for(PackageInfo packinfo : packinfos){
			//获取该应用的所有权限信息
			String[] permissions = packinfo.requestedPermissions;
			if(permissions!=null&&permissions.length>0){
				for(String permission : permissions){
					//筛选出具有Internet权限的应用程序
					if("android.permission.INTERNET".equals(permission)){
						//用于封装具有Internet权限的应用程序信息
						TrafficInfo trafficInfo = new TrafficInfo();
						//封装应用信息
						trafficInfo.setPackname(packinfo.packageName);
						trafficInfo.setIcon(packinfo.applicationInfo.loadIcon(pm));
						trafficInfo.setAppname(packinfo.applicationInfo.loadLabel(pm).toString());
						//获取到应用的uid（user id）
						int uid = packinfo.applicationInfo.uid;
						//TrafficStats对象通过应用的uid来获取应用的下载、上传流量信息


						//发送的 上传的流量byte
						trafficInfo.setRx(TrafficStats.getUidRxBytes(uid));
						 //下载的流量 byte
						trafficInfo.setTx(TrafficStats.getUidTxBytes(uid));
						trafficInfos.add(trafficInfo);
						trafficInfo = null;
						break;
					}
				}
			}
		}
		return trafficInfos;
	}

TrafficStats.getMobileTxBytes();//获取手机3g/2g网络上传的总流量
TrafficStats.getMobileRxBytes();//手机2g/3g下载的总流量

TrafficStats.getTotalTxBytes();//手机全部网络接口 包括wifi，3g、2g上传的总流量
TrafficStats.getTotalRxBytes();//手机全部网络接口 包括wifi，3g、2g下载的总流量


/**
 * Created by ybf
 */
 public List inivData() {
        INetworkStatsService mStatsService = null;
        INetworkStatsSession mStatsSession = null;
        NetworkTemplate mTemplate = null;
        NetworkStats sta = null;
        List<AppInfoBean>  lists = new ArrayList<>();
        try {
            long start = getStarttime();
            long end =System.currentTimeMillis();
            Log.e(TAG, "[start]=" + start + "[end]=" + end);
            mStatsService = INetworkStatsService.Stub.asInterface(ServiceManager.getService("netstats"));
            Log.e(TAG, "[mStatsService]="+mStatsService);
            mStatsSession = mStatsService.openSession();
            Log.e(TAG, "[mStatsSession]="+mStatsSession);
            mTemplate = buildTemplateMobileAll(getActiveSubscriberId(mContext));
            Log.e(TAG, "[getActiveSubscriberId(mContext)]="+getActiveSubscriberId(mContext));
            Log.e(TAG, "[mTemplate]="+mTemplate);
            sta = mStatsSession.getSummaryForAllUid(mTemplate, start, end, true);
            NetworkStats.Entry entry = null;
            int size = sta != null ? sta.size() : 0;
            Log.e(TAG, "[service-size-]" + size);
            for (int i = 0; i < size; i++) {
                entry = sta.getValues(i, entry);
                final int uid = entry.uid;
                long totalapp = entry.rxBytes + entry.txBytes;
                String sumtotal = Formatter.formatFileSize(mContext, totalapp);
                String name = null;
                switch (uid) {
                    case android.os.Process.SYSTEM_UID:
                        name = res.getString(R.string.process_kernel_label);
                        break;
                    case -4:
                        name = res.getString(R.string.data_usage_uninstalled_apps);
                        break;
                    case -5:
                        name = res.getString(R.string.tether_settings_title_all);
                        break;
                    default:
                       if(uid< 9999){
                            name = "null";
                        }else {
                            try {
                                name = getProgramNameByPackageName(mContext, uid);
                            } catch (Exception e) {
                                Log.e(TAG, "package name is null");
                            }
                        }
                        break;
                }
                AppInfoBean appInfo = new AppInfoBean();
                appInfo.setName(name);
                appInfo.setTotal(sumtotal);
                appInfo.setUid(uid);
                lists.add(appInfo);
                Log.e(TAG, "[uid]=" + uid + "[name]=" + name + "[total]=" + sumtotal);
            }
        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
            e.toString();
        }
        return  lists;
    }


    /**
     * Created by ybf
     */
     public List inivDataHistory(long start ,long end) {
            INetworkStatsService mStatsService = null;
            INetworkStatsSession mStatsSession = null;
            NetworkTemplate mTemplate = null;
            NetworkStats sta = null;
            List<AppInfoBean>  lists = new ArrayList<>();
            try {
                if(start == 0){
                    start = getStarttime();
                }
               if(end == 0){
                   end =System.currentTimeMillis();
               }
                Log.e(TAG, "[start]=" + start + "[end]=" + end);
                mStatsService = INetworkStatsService.Stub.asInterface(ServiceManager.getService("netstats"));
                Log.e(TAG, "[mStatsService]="+mStatsService);
                mStatsSession = mStatsService.openSession();
                Log.e(TAG, "[mStatsSession]="+mStatsSession);
                mTemplate = buildTemplateMobileAll(getActiveSubscriberId(mContext));
                Log.e(TAG, "[getActiveSubscriberId(mContext)]="+getActiveSubscriberId(mContext));
                Log.e(TAG, "[mTemplate]="+mTemplate);
                sta = mStatsSession.getSummaryForAllUid(mTemplate, start, end, true);
                NetworkStats.Entry entry = null;
                int size = sta != null ? sta.size() : 0;
                Log.e(TAG, "[service-size-]" + size);
                for (int i = 0; i < size; i++) {
                    entry = sta.getValues(i, entry);
                    final int uid = entry.uid;
                    long totalapp = entry.rxBytes + entry.txBytes;
                    String sumtotal = Formatter.formatFileSize(mContext, totalapp);
                    String name = null;
                    switch (uid) {
                        case android.os.Process.SYSTEM_UID:
                            name = res.getString(R.string.process_kernel_label);
                            break;
                        case -4:
                            name = res.getString(R.string.data_usage_uninstalled_apps);
                            break;
                        case -5:
                            name = res.getString(R.string.tether_settings_title_all);
                            break;
                        default:
                            if(uid< 9999){
                                name = "null";
                            }else {
                                try {
                                    name = getProgramNameByPackageName(mContext, uid);
                                } catch (Exception e) {
                                    Log.e(TAG, "package name is null");
                                }
                            }
                            break;
                    }
                    AppInfoBean appInfo = new AppInfoBean();
                    appInfo.setName(name);
                    appInfo.setTotal(sumtotal);
                    appInfo.setUid(uid);
                    lists.add(appInfo);
                    Log.e(TAG, "[uid]=" + uid + "[name]=" + name + "[total]=" + sumtotal);
                }
            } catch (Exception e) {
                // TODO: handle exception
            }
            return  lists;
        }